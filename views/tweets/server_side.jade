extend ../tweet_layout

block additional-params
    div.control-group.span10
        label.control-label Render HTML with
        div.controls
            select(name="method",style="width:97%")
                option(value="server") Serverseitig - HTML Erstellung mit JADE
                option(value="js",selected=(params.method==="js"?"selected":undefined)) Clientseitig - HTML Erstellung über Stringkonkatenierung
                option(value="bb",selected=(params.method==="bb"?"selected":undefined)) Clientseitig - BackboneJS
                option(value="ng",selected=(params.method==="ng"?"selected":undefined)) Clientseitig - AngularJS
                option(value="underscore", selected=(params.method==="underscore"?"selected":undefined)) Clientseitig - Templating mit UnderscoreJS

block stats
    p
    | Dom Ladezeit Time&nbsp;
    span#domContentLoaded
        img(src="/img/ajax-loader.gif")
    br
    | Seiten Ladezeit Time &nbsp;
    span#pageLoaded
        img(src="/img/ajax-loader.gif")
    br
    | Renderzeit auf dem Server &nbsp;
    span#templateServerRendered
        img(src="/img/ajax-loader.gif")

block tweetcontent
    h2 Show #{amount} tweets
    ul.tweets
        - tweets.forEach(function(tweet,index){
        li.tweet
            - var date=new Date(tweet.created_at);
            - var months=["Januar","Februar","März","April","Mai","Juni","Juli", "August","September","Oktober","November","Dezember"];
            a.clearfix(href="http://twitter.com/#{tweet.user.nic_name}")
                h3
                    span.user-name(class='#{tweet.user.verified?"verified":""}') #{tweet.user.name}&nbsp;
                    | am #{date.getDay()}.#{months[date.getMonth()]} #{date.getFullYear()}
                    | um #{date.getHours()}:#{date.getMinutes()} Uhr
                div.user
                    img(src="#{showProfileImages?tweet.user.profile_image:'/img/default-profile.png'}")
                    span.user-infos
                        | kommt aus #{tweet.user.location}
                        br
                        | #{tweet.user.followers} follower
                div.text #{tweet.text}
        - })

    script(src="/js/app.js");
    script.
        //$(document).on("ready",function(){
            var testSaver=new Test(#{saveResults},3,"#{host}/tweets/render#{encodeURIComponent(query)}",#{params.limit || 0},#{params.interval || 1},#{parseInt(params.max) || parseInt(params.limit) || 0},"#{params.testid||false}","Server Side");
            window.addEventListener("load",function(){
               var end=+new Date()-start;
                console.log(end,"end loading");
                console.timeEnd("load");
                document.getElementById("pageLoaded").innerHTML=end+"ms";
            })
            window.addEventListener("DOMContentLoaded",function(){
               var end=+new Date()-start;
                console.log(end,"end Dom content loaded");
                console.timeEnd("DOMContentLoaded");
                testSaver.addResult({loadDom:end});
                document.getElementById("domContentLoaded").innerHTML=end+"ms";
            })

            var socket = io.connect('http://localhost:3001');
            socket.on('htmlTemplateRenderingTime', function (data) {
                console.log("HTML",data.time);
                testSaver.addResult({htmlRenderedOnServer:data.time});
                document.getElementById("templateServerRendered").innerHTML=data.time
            });

            var doc = document.getElementsByTagName("html")[0]
            testSaver.addResult({documentSize:JSON.getSize(doc.innerHTML)});
        //}

